<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/21/2023 1:30:58 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="JOSE"
  DTS:CreatorName="JOSE\jmigu"
  DTS:DTSID="{768BF2F8-F083-45C5-9551-125C2262C61F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5209.0"
  DTS:LocaleID="2058"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="7"
  DTS:VersionGUID="{BFA792BB-B9CB-4CFA-AA11-FF51C5054816}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DB_Conn_SSIS_DEMO_EXCEL]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{FEA633E0-8049-404E-9112-D00BAA3C1C49}"
      DTS:ObjectName="DB_Conn_SSIS_DEMO_EXCEL">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=(localdb)\ProjectModels;Initial Catalog=SSIS_DEMO_EXCEL;Integrated Security=True;Application Name=SSIS-Package-{FEA633E0-8049-404E-9112-D00BAA3C1C49}(localdb)\ProjectModels.SSIS_DEMO_EXCEL;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{43690607-BD06-4AFD-8F88-897A955ECE2F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ColumnNameForGrouping">
      <DTS:VariableValue
        DTS:DataType="8">Region</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1E908D0B-F73F-4033-8F01-E81C43537EE3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFileName">
      <DTS:VariableValue
        DTS:DataType="8">DemoExcel</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{90DD6161-7D4F-4A8B-8F9A-AB874E4C162E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">E:\SSIS\SSIS_CrearExcelConDatosEnDiferentesHojas\Excel\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8A667C96-3BC4-4EC2-A236-AF8B7E03C951}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TableName">
      <DTS:VariableValue
        DTS:DataType="8">dbo.TotalSale</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{C44D5928-17C9-431E-A209-FFE8CB9900CF}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_419673b4bfa342ef875392f88b6e83a6"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ColumnNameForGrouping,User::ExcelFileName,User::FolderPath,User::TableName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_419673b4bfa342ef875392f88b6e83a6.Properties.Settings.get_Default():ST_419673b4bfa342ef875392f88b6e83a6.Properties.Sett" +
    "ings")]

namespace ST_419673b4bfa342ef875392f88b6e83a6.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient; 
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System;
using System.Data;
#endregion

namespace ST_419673b4bfa342ef875392f88b6e83a6
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here

            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");

            try
            {
                //Declare Variables
                string ExcelFileName = Dts.Variables["User::ExcelFileName"].Value.ToString();
                string FolderPath = Dts.Variables["User::FolderPath"].Value.ToString();
                string TableName = Dts.Variables["User::TableName"].Value.ToString();
                string ColumnNameForGrouping = Dts.Variables["User::ColumnNameForGrouping"].Value.ToString();
                ExcelFileName = ExcelFileName + "_" + datetime + ".xlsx";

                OleDbConnection Excel_OLE_Con = new OleDbConnection();
                OleDbCommand Excel_OLE_Cmd = new OleDbCommand();

                //Construct ConnectionString for Excel
                string connstring = "Provider=Microsoft.ACE.OLEDB.12.0;" + "Data Source=" + FolderPath + ExcelFileName
                    + ";" + "Extended Properties=\"Excel 12.0 Xml;HDR=YES;\"";

                //drop Excel file if exists
                File.Delete(FolderPath + "\\" + ExcelFileName + ".xlsx");

                //USE ADO.NET Connection from SSIS Package to get data from table
                SqlConnection myADONETConnection = new SqlConnection();
                myADONETConnection = (SqlConnection)(Dts.Connections["DB_Conn_SSIS_DEMO_EXCEL"].AcquireConnection(Dts.Transaction) as SqlConnection);


                //Read distinct Group Values for each Excel Sheet
                string query = "Select distinct " + ColumnNameForGrouping + " from " + TableName;

                //MessageBox.Show(query.ToString());
                SqlCommand cmd = new SqlCommand(query, myADONETConnection);
                //myADONETConnection.Open();
                DataTable dt = new DataTable();
                dt.Load(cmd.ExecuteReader());
                myADONETConnection.Close();

                //Loop through values for ColumnNameForGroup
                foreach (DataRow dt_row in dt.Rows)
                {
                    string ColumnValue = "";
                    object[] array = dt_row.ItemArray;
                    ColumnValue = array[0].ToString();


                    //Load Data into DataTable from SQL ServerTable
                    string queryString =
                     "SELECT * from " + TableName + " Where " + ColumnNameForGrouping + "='" + ColumnValue + "'";
                    SqlDataAdapter adapter = new SqlDataAdapter(queryString, myADONETConnection);
                    DataSet ds = new DataSet();
                    adapter.Fill(ds);


                    //Get Header Columns
                    string TableColumns = "";

                    // Get the Column List from Data Table so can create Excel Sheet with Header
                    foreach (DataTable table in ds.Tables)
                    {
                        foreach (DataColumn column in table.Columns)
                        {
                            TableColumns += column + "],[";
                        }
                    }

                    // Replace most right comma from Columnlist
                    TableColumns = ("[" + TableColumns.Replace(",", " Text,").TrimEnd(','));
                    TableColumns = TableColumns.Remove(TableColumns.Length - 2);
                    //MessageBox.Show(TableColumns);


                    //Use OLE DB Connection and Create Excel Sheet
                    Excel_OLE_Con.ConnectionString = connstring;
                    Excel_OLE_Con.Open();
                    Excel_OLE_Cmd.Connection = Excel_OLE_Con;
                    Excel_OLE_Cmd.CommandText = "Create table [" + ColumnValue + "] (" + TableColumns + ")";
                    Excel_OLE_Cmd.ExecuteNonQuery();

                    //Write Data to Excel Sheet from DataTable dynamically
                    foreach (DataTable table in ds.Tables)
                    {
                        String sqlCommandInsert = "";
                        String sqlCommandValue = "";
                        foreach (DataColumn dataColumn in table.Columns)
                        {
                            sqlCommandValue += dataColumn + "],[";
                        }

                        sqlCommandValue = "[" + sqlCommandValue.TrimEnd(',');
                        sqlCommandValue = sqlCommandValue.Remove(sqlCommandValue.Length - 2);
                        sqlCommandInsert = "INSERT into [" + ColumnValue + "] (" + sqlCommandValue + ") VALUES(";

                        int columnCount = table.Columns.Count;
                        foreach (DataRow row in table.Rows)
                        {
                            string columnvalues = "";
                            for (int i = 0; i < columnCount; i++)
                            {
                                int index = table.Rows.IndexOf(row);
                                columnvalues += "'" + table.Rows[index].ItemArray[i] + "',";

                            }
                            columnvalues = columnvalues.TrimEnd(',');
                            var command = sqlCommandInsert + columnvalues + ")";
                            Excel_OLE_Cmd.CommandText = command;
                            Excel_OLE_Cmd.ExecuteNonQuery();
                        }

                    }

                    Excel_OLE_Con.Close();
                }

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception exception)
            {

                // Create Log File for Errors
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::FolderPath"].Value.ToString() + "\\" +
                    Dts.Variables["User::ExcelFileName"].Value.ToString() + datetime + ".log"))
                {
                    sw.WriteLine(exception.ToString());
                    Dts.TaskResult = (int)ScriptResults.Failure;

                }
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_419673b4bfa342ef875392f88b6e83a6</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_419673b4bfa342ef875392f88b6e83a6</msb:DisplayName>
    <msb:ProjectId>{4D4036C3-2F6F-4E3F-B867-65FE4741C8FE}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_419673b4bfa342ef875392f88b6e83a6.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_419673b4bfa342ef875392f88b6e83a6")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_419673b4bfa342ef875392f88b6e83a6")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_419673b4bfa342ef875392f88b6e83a6.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A39CD88A-B00B-4205-823F-72869DF14275}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_419673b4bfa342ef875392f88b6e83a6</RootNamespace>
    <AssemblyName>ST_419673b4bfa342ef875392f88b6e83a6</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_419673b4bfa342ef875392f88b6e83a6.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_419673b4bfa342ef875392f88b6e83a6.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_419673b4bfa342ef875392f88b6e83a6.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_419673b4bfa342ef875392f88b6e83a6.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_419673b4bfa342ef875392f88b6e83a6.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_419673b4bfa342ef875392f88b6e83a6.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAAppamQAAAAAAAAAAOAAIiALATAAAB4AAAAIAAAAAAAAAjwA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALA7AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAACBwAAAAgAAAAHgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAgAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADk
OwAAAAAAAEgAAAACAAUAQCcAALgTAAABAAAAAAAAAPg6AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgC4BQAAAQAAESgQAAAKCxIBcgEAAHAoEQAACgoCKBIA
AApvEwAACnIfAABwbxQAAApvFQAACm8WAAAKDAIoEgAACm8TAAAKckcAAHBvFAAACm8VAAAKbxYA
AAoNAigSAAAKbxMAAApyaQAAcG8UAAAKbxUAAApvFgAAChMEAigSAAAKbxMAAApyiQAAcG8UAAAK
bxUAAApvFgAAChMFCHLBAABwBnLFAABwKBcAAAoMcxgAAAoTBnMZAAAKEwdy0QAAcAkIci8BAHAo
FwAAChMICXKNAQBwCHLFAABwKBcAAAooGgAACnMbAAAKEwkCKBIAAApvHAAACnKRAQBwbx0AAAoC
KBIAAApvHgAACm8fAAAKdRIAAAETCXLBAQBwEQVy4wEAcBEEKBcAAAoRCXMgAAAKEwpzIQAACiUR
Cm8iAAAKbyMAAAoRCW8kAAAKbyUAAApvJgAAChMLOJYDAAARC28nAAAKdBkAAAFy8QEAcBMMbygA
AAoWmm8WAAAKEwwdjSgAAAElFnLzAQBwoiUXEQSiJRhyEQIAcKIlGREFoiUaciECAHCiJRsRDKIl
HHInAgBwoigpAAAKEQlzKgAACnMrAAAKEw0RDW8sAAAKJnLxAQBwEw4RDW8tAAAKbyYAAAoTDytk
EQ9vJwAACnQYAAABby4AAApvJgAAChMQKyoREG8nAAAKdBYAAAETEREOERElLQQmFCsFbxYAAApy
KwIAcCgvAAAKEw4REG8wAAAKLc3eFREQdRcAAAETEhESLAcREm8xAAAK3BEPbzAAAAotk94VEQ91
FwAAARMSERIsBxESbzEAAArccjMCAHARDnI3AgBwcjsCAHBvMgAACheNNQAAASUWHyydbzMAAAoo
NAAAChMOEQ4RDm81AAAKGFlvNgAAChMOEQYRCG83AAAKEQZvOAAAChEHEQZvOQAAChEHG40oAAAB
JRZySQIAcKIlFxEMoiUYcmcCAHCiJRkRDqIlGnJvAgBwoigpAAAKbzoAAAoRB287AAAKJhENby0A
AApvJgAAChMPOLkBAAARD28nAAAKdBgAAAETE3LxAQBwExRy8QEAcBMVERNvLgAACm8mAAAKExAr
KhEQbycAAAp0FgAAARMXERURFyUtBCYUKwVvFgAACnIrAgBwKC8AAAoTFREQbzAAAAotzd4VERB1
FwAAARMSERIsBxESbzEAAArccjMCAHARFReNNQAAASUWHyydbzMAAAooNAAAChMVERURFW81AAAK
GFlvNgAAChMVG40oAAABJRZycwIAcKIlFxEMoiUYcmcCAHCiJRkRFaIlGnKPAgBwoigpAAAKExQR
E28uAAAKbzwAAAoTFhETbyUAAApvJgAAChMQOKAAAAAREG8nAAAKdBkAAAETGHLxAQBwExkWExsr
SxETbyUAAAoRGG89AAAKExwRGXInAgBwERNvJQAAChEcbz4AAApvKAAAChEbmiUtBCYUKwVvFgAA
CnKjAgBwKBcAAAoTGREbF1gTGxEbERYyrxEZF401AAABJRYfLJ1vMwAAChMZERQRGXJvAgBwKC8A
AAoTGhEHERpvOgAAChEHbzsAAAomERBvMAAACjpU////3hUREHUXAAABExIREiwHERJvMQAACtwR
D28wAAAKOjv+///eFREPdRcAAAETEhESLAcREm8xAAAK3BEGbyQAAAoRC28wAAAKOl78///eFREL
dRcAAAETEhESLAcREm8xAAAK3AIoEgAAChZvPwAACt2WAAAAEx0bjSgAAAElFgIoEgAACm8TAAAK
ckcAAHBvFAAACm8VAAAKbxYAAAqiJRdyjQEAcKIlGAIoEgAACm8TAAAKch8AAHBvFAAACm8VAAAK
bxYAAAqiJRkGoiUacqkCAHCiKCkAAAooQAAAChMeER4RHW8WAAAKb0EAAAoCKBIAAAoXbz8AAAre
DBEeLAcRHm8xAAAK3N4AKkHEAAACAAAA9wEAADcAAAAuAgAAFQAAAAAAAAACAAAA3QEAAHEAAABO
AgAAFQAAAAAAAAACAAAANAMAADcAAABrAwAAFQAAAAAAAAACAAAA+wMAALMAAACuBAAAFQAAAAAA
AAACAAAABQMAAMwBAADRBAAAFQAAAAAAAAACAAAAUgEAAKkDAAD7BAAAFQAAAAAAAAACAAAAjQUA
ABwAAACpBQAADAAAAAAAAAAAAAAAEwAAAA4FAAAhBQAAlgAAABoAAAEeAihCAAAKKh4CKEMAAAoq
rn4BAAAELR5yswIAcNADAAACKEQAAApvRQAACnNGAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAA
BCoafgMAAAQqHgIoRwAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5
AAAAAAUAbAAAAIgFAAAjfgAA9AUAAEwIAAAjU3RyaW5ncwAAAABADgAAKAMAACNVUwBoEQAAEAAA
ACNHVUlEAAAAeBEAAEACAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAA6AAAA
BQAAAAYAAAAJAAAAAQAAAEcAAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAAB
AAAAAABXBAEAAAAAAAYA2AJjBgYAZwNjBgYAJAJQBg8A1wYAAAYAUQL6BAYAuwL6BAYAnAL6BAYA
TgP6BAYA+AL6BAYAEQP6BAYAaAL6BAYAgwKkAwoALAMGBAoAcwEGBAYACwGNBA4AVgVrAA4AkwBr
AA4AeAW+Bw4AoAC+BwYAKQZDBw4AmwdfAA4AtQRfAAYA1gCNBA4AwwBfAA4AFghfAAYAhgWNBAYA
AgYuAAYAlASNBAYABwJQBgYAlAeNBAYA4AWDBgYAowXVBBIA0AFBBBIAOAJBBBIAqgHABAYA7AFj
BgoALwQGBBYAJAcUARYAzQAUAQYA1QONBAYABgEuABYAWgcUARYA8AUUAQ4AwAW+Bw4AtAVfAA4A
WQWQBQ4ANQVfAA4AjwFfAA4AGga+Bw4AHQaQBQ4ADAVfAA4AIAVfAAYArwWNBA4AlgCQBQYADwYu
AAYAPgGNBAYA4gCNBAYAMAj6BAAAAAAlAAAAAAABAAEAAQAQAKoEAQA5AAEAAQAAABAAigbmBnkA
AQADAAABEAAuB+YGjQADAAcAAwEAAHYHAABxAAQACgARAJkEPwERAGMBQwERALMASAEGBlcATAFW
gGYHTwFWgEMBTwFQIAAAAACGALAEBgABANgmAAAAAIYYQwYGAAEA4CYAAAAAgxhDBgYAAQDoJgAA
AACTCNwFUwEBABQnAAAAAJMISwFYAQEAGycAAAAAkwhXAV4BAQAjJwAAAACWCKMHZQECAConAAAA
AIYYQwYGAAIAMicAAAAAkRhJBmoBAgAAAAEAjwMJAEMGAQARAEMGBgAZAEMGCgApAEMGEAAxAEMG
EAA5AEMGEABBAEMGEABJAEMGEABRAEMGEABZAEMGEABhAEMGEABpAEMGBgDpAEMGBgARAUMGFQAh
AUMGBgB5AA4ITgB5ANMDUwBxAG4HWAApASAHXgAxAYQEZAA5AYUDawDxANMDbwBBAY0HcwCBAEMG
BgCJAEMGBgBJAeUBewCRAEMGBgApAVYHgABRAYQEhgApAeoEawBZAWYFjQCZAEMGkgDBAEMGBgCZ
AM4FmQDBAIYAnwBxAcIBBgDBAIQHpgCBATUGrAChANQHawDJAB4IsQBBAY0HtgCJAUMGkgCpAEMG
BgCRAX8EvACpABUHwgDBADcHyABBAY0HzgChAOoH1QC5AMgBBgBBAasA2QBBAYsA3wBBAY0H5QBB
AdwD6wBBAZUD7wBxAb4DEABxAaUEBgCJAEcF9ACxAfMHEACxATkI6wCBAeAH6wB5AZwD+gB5AYQE
AAEpAa8HAQBJAQMIBgG5ATQBEABxAEMGBgDxAEMGBgDBAfQADAHBASwIFQH5AEMGGwEZAUMGBgAI
ABQANQEIABgAOgEpAHMApgEuAAsAfgEuABMAhwEuABsApgEuACMArwEuACsA2AEuADMA2AEuADsA
2AEuAEMArwEuAEsA3gEuAFMA2AEuAFsA9QFDAGMAOgFJAHMApgFhAHsAOgFjAGsAOgEcAAMAAQAE
AAMAAADgBW4BAABrAXMBAACnB3kBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAABdId1h
AAAAAAAAAQAAAAQAAAAAAAAAAAAAACMBfQAAAAAAEAAAAAAAAAAAAAAALAHnAwAAAAAEAAAAAAAA
AAAAAAAjAV8AAAAAAAQAAAAAAAAAAAAAACMBjQQAAAAAEAAAAAAAAAAAAAAALAE4AAAAAAAAAAAA
AQAAAJQGAAAFAAIAAAAAAABTVF80MTk2NzNiNGJmYTM0MmVmODc1MzkyZjg4YjZlODNhNgA8TW9k
dWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lz
dGVtLkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIATG9hZABUcmltRW5kAE9sZURiQ29t
bWFuZABTcWxDb21tYW5kAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAERhdGFUYWJsZQBWYXJpYWJs
ZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAERh
dGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAFR5cGUARmFp
bHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0
T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0
dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUARGVsZXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdn
YWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJp
YnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUA
QXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1
dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1
dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0
cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJp
YnV0ZQBnZXRfVmFsdWUAdmFsdWUAUmVtb3ZlAEluZGV4T2YAU3lzdGVtLlJ1bnRpbWUuVmVyc2lv
bmluZwBzZXRfQ29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBnZXRfTGVuZ3RoAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRU
YXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF80MTk2NzNiNGJm
YTM0MmVmODc1MzkyZjg4YjZlODNhNi5kbGwARmlsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNv
dXJjZU1hbgBPcGVuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBT
eXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0
YVRhYmxlQ29sbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBz
ZXRfQ29ubmVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVj
dGlvbgBFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAENoYXIASURhdGFS
ZWFkZXIAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29u
bmVjdGlvbk1hbmFnZXIAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAU3FsRGF0YUFkYXB0ZXIASUVu
dW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5
c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF80MTk2NzNi
NGJmYTM0MmVmODc1MzkyZjg4YjZlODNhNi5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMA
RGVidWdnaW5nTW9kZXMAU1RfNDE5NjczYjRiZmEzNDJlZjg3NTM5MmY4OGI2ZTgzYTYuUHJvcGVy
dGllcwBnZXRfVGFibGVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAZ2V0X0NvbHVtbnMAU3lzdGVt
LkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0
cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AERhdGFTZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1
bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AGdldF9Db3VudABNb3ZlTmV4dABz
ZXRfQ29tbWFuZFRleHQAQ3JlYXRlVGV4dABnZXRfTm93AERhdGFSb3cAZ2V0X0l0ZW1BcnJheQBn
ZXRfQXNzZW1ibHkARXhlY3V0ZU5vblF1ZXJ5AAAAAAAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0A
cwBzAAAnVQBzAGUAcgA6ADoARQB4AGMAZQBsAEYAaQBsAGUATgBhAG0AZQAAIVUAcwBlAHIAOgA6
AEYAbwBsAGQAZQByAFAAYQB0AGgAAB9VAHMAZQByADoAOgBUAGEAYgBsAGUATgBhAG0AZQAAN1UA
cwBlAHIAOgA6AEMAbwBsAHUAbQBuAE4AYQBtAGUARgBvAHIARwByAG8AdQBwAGkAbgBnAAADXwAA
Cy4AeABsAHMAeAAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUA
LgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAF07AEUAeAB0
AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAA
IABYAG0AbAA7AEgARABSAD0AWQBFAFMAOwAiAAADXAAAL0QAQgBfAEMAbwBuAG4AXwBTAFMASQBT
AF8ARABFAE0ATwBfAEUAWABDAEUATAAAIVMAZQBsAGUAYwB0ACAAZABpAHMAdABpAG4AYwB0ACAA
AA0gAGYAcgBvAG0AIAAAAQAdUwBFAEwARQBDAFQAIAAqACAAZgByAG8AbQAgAAAPIABXAGgAZQBy
AGUAIAAABT0AJwABAycAAQddACwAWwAAA1sAAAMsAAANIABUAGUAeAB0ACwAAB1DAHIAZQBhAHQA
ZQAgAHQAYQBiAGwAZQAgAFsAAAddACAAKAAAAykAABtJAE4AUwBFAFIAVAAgAGkAbgB0AG8AIABb
AAATKQAgAFYAQQBMAFUARQBTACgAAAUnACwAAQkuAGwAbwBnAABxUwBUAF8ANAAxADkANgA3ADMA
YgA0AGIAZgBhADMANAAyAGUAZgA4ADcANQAzADkAMgBmADgAOABiADYAZQA4ADMAYQA2AC4AUABy
AG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAABWjWeHyhF+Tp5NcpxCsSAM
AAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAhTEHHw4RPQ4ODg4SQRJFDhJJEk0SUQ4SVQ4SURJR
ElkSXRJhDg4IElkSZQ4OCAgSaRJtBAAAET0EIAEODgUgABKAlQUgABKAmQYgARKAnRwDIAAcAyAA
DgcABA4ODg4OBAABAQ4FIAASgKkGIAESgK0cBCABHBwGIAIBDhJJBSAAEoCxBiABARKAtQUgABKA
vQQgABJRBCAAHRwFAAEOHQ4FIAEIElUFIAASgM0FIAASgNEGAAMODg4OAyAAAgUgAg4ODgUgAQ4d
AwUAAg4ODgMgAAgEIAEOCAUgAQESQQUgAQgSZQUgARJlCAUAARJtDggAARKA4RGA5QUgABKA6Qcg
AgEOEoDpCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEn0EBhKAgQMGEhACBggDBhEUBAAA
En0FAAASgIEGAAEBEoCBBAAAEhADAAABBAgAEn0FCAASgIEECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfNDE5NjczYjRiZmEzNDJlZjg3
NTM5MmY4OGI2ZTgzYTYAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMwAASQEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29y
ayA0LjcAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBt
c2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2Vu
PWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAA
AAAAAAAAAABQQURQQURQtAAAANg7AAAAAAAAAAAAAPI7AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADkOwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAN1hXSEAAAEA3WFdIT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8ANAAxADkANgA3ADMAYgA0AGIAZgBhADMANAAyAGUAZgA4ADcANQAzADkAMgBmADgAOABiADYA
ZQA4ADMAYQA2AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgANQA0
ADEALgAyADUAMAA1ADMAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
NAAxADkANgA3ADMAYgA0AGIAZgBhADMANAAyAGUAZgA4ADcANQAzADkAMgBmADgAOABiADYAZQA4
ADMAYQA2AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABl
AG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAFQAXwA0ADEAOQA2ADcAMwBiADQAYgBmAGEAMwA0ADIAZQBmADgANwA1ADMAOQAyAGYAOAA4
AGIANgBlADgAMwBhADYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBUAF8ANAAxADkANgA3ADMAYgA0AGIAZgBhADMANAAyAGUAZgA4ADcANQAzADkAMgBmADgAOABi
ADYAZQA4ADMAYQA2AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA4ADUANAAxAC4AMgA1ADAANQAzAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA4ADUANAAxAC4AMgA1ADAANQAzAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAAQ8AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="194,170" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>